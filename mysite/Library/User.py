####################################################################################################################################################  
#                                                                                                                                                  #
# This file has been generated by Amit Patankar:                                                                                                   #
#     Created by              : amit.patankar                                                                                                      #    
#     Created on              : 14-07-2013                                                                                                         #
#     Directory               : /Desktop/                                                                                                          #
#     Purpose                 : This structure holds the attributes of each Answer Sheet.                                                          #
#                                                                                                                                                  #
####################################################################################################################################################

from Values import *
from Key import *
from Scored import *
from Summary import *
from Data import *
from Graph import *
import csv

#Base User Class
class User(object):

    #This is the default constructor with all variables defined.
    def __init__(self, name, c):
        self.name = name
        self.c = c #class
        self.tests_taken = [] #array of scored tests for data analysis
        self.data = Data_Holder()
    

    def build(self):
        mkdir(user_directory(self.name, self.c))
        self.save_user()

    def grade(self, answers):
        t = Test(answers.id)
        ts = t.grade(answers)
        ss = Score_Summary(ts)
        #disable printing in console
        #print (ss)
        sections = {}
        sections[WRITING_TYPE] = ts.reports[WRITING_TYPE].incorrect_questions
        sections[MATH_TYPE] = ts.reports[MATH_TYPE].incorrect_questions
        sections[READING_TYPE] = ts.reports[READING_TYPE].incorrect_questions
        st = Scored_Test(answers.id)
        st.recreate(sections)
        st.date = answers.date
        st.essay = answers.essay
        #put the scored test in the history page after it has been graded
        self.tests_taken.append(st)
        #add this new test to data sections
        self.stats_from_test(st)
        self.grade_HTML(ts, ss)


    def save_user(self):
        FILE = open(user_filename(self.name, self.c), "w")
        lines = []
        lines.append("Name:" + self.name + endl + endl)
        for test in self.tests_taken:
            lines.append(str(test))
        FILE.writelines(lines)          
        FILE.close()


    def recreate_user(self, filename):
        with open(filename) as f:
            lines = f.readlines()
            assert(self.name in lines[0]) #verifies name
            for line in lines:
                line = line.strip()
                if line == '':
                    continue
                elif 'TEST_ID' in line:
                    test_id = line.split(' ')[1]
                    sections = {}
                    current_test = Scored_Test(test_id)
                elif 'ESSAY' in line:
                    current_test.essay = int(line.split(' ')[1])
                elif 'DATE' in line:
                    current_test.date = line.split(' ')[1]
                elif 'WRITING:' in line:
                    current_TYPE = WRITING_TYPE
                elif 'MATH:' in line:
                    current_TYPE = MATH_TYPE
                elif 'READING:' in line:
                    current_TYPE = READING_TYPE
                elif 'Missed Questions:' in line:
                    data = string_to_array(line.split(":")[1])
                    sections[current_TYPE] = data
                elif SECTION_SEP in line:
                    current_test.recreate(sections)
                    sections = {}
                    self.tests_taken.append(current_test)
        for test in self.tests_taken:
            self.stats_from_test(test)



    def stats_from_test(self, test):
        with open(test_directory(test.test_id) + DIR_SEP + KEYFILE, 'rU') as f:
            reader = csv.reader(f)
            key = {}
            for row in reader:
                if row != KEY_VECTOR or row[0] == '':
                    index = int(row[0])
                    section_type = int(row[1])
                    size = int(row[2])
                    key[index] = (section_type, size)
        for index in key.keys():
            self.stats_from_file(test, key, index)


    def stats_from_file(self, test, key, index):
        section_type = key[index][0]
        if not file_exists(test_directory(test.test_id) + DIR_SEP + "Section " + str(index) + CSV):
            return
        ifile  = open(test_directory(test.test_id) + DIR_SEP + "Section " + str(index) + CSV, "rU")
        reader = csv.reader(ifile)

        for row in reader:
            if row != LABEL_VECTOR or row[0] == '':
                number = int(row[NUMBER_INDEX])
                difficulty = int(row[DIFFICULTY_INDEX])
                qtype = row[TYPE_INDEX]
                if index_exists(test.missed_questions_index, index) and index_exists(test.missed_questions_index[index], number):
                    attempt = test.missed_questions_index[index][number]
                    if attempt == '?':
                        self.data.data[section_type].stats["L" + str(difficulty)].add_blank()
                        self.data.data[section_type].stats[qtype].add_blank()
                        test.data.data[section_type].stats["L" + str(difficulty)].add_blank()
                        test.data.data[section_type].stats[qtype].add_blank()
                        #complete data processing
                        #add the level and type blanks
                    else:
                        self.data.data[section_type].stats["L" + str(difficulty)].add_miss()
                        self.data.data[section_type].stats[qtype].add_miss()
                        test.data.data[section_type].stats["L" + str(difficulty)].add_miss()
                        test.data.data[section_type].stats[qtype].add_miss()
                else:
                    self.data.data[section_type].stats["L" + str(difficulty)].add_correct()
                    self.data.data[section_type].stats[qtype].add_correct()
                    test.data.data[section_type].stats["L" + str(difficulty)].add_correct()
                    test.data.data[section_type].stats[qtype].add_correct()

        ifile.close()

    def average_scores(self):
        writing_score = 0
        reading_score = 0
        math_score = 0
        essay_score = 0
        total_score = 0
        for test in self.tests_taken:
            writing_score += test.score_summary.section_scores[WRITING_TYPE]
            reading_score += test.score_summary.section_scores[READING_TYPE]
            math_score += test.score_summary.section_scores[MATH_TYPE]
            essay_score += test.essay
        total_score = (writing_score + reading_score + math_score) // len(self.tests_taken)
        reading_score = reading_score // len(self.tests_taken)
        writing_score = writing_score // len(self.tests_taken)
        math_score = math_score // len(self.tests_taken)
        essay_score = essay_score // len(self.tests_taken)
        return [total_score, reading_score, writing_score, math_score, essay_score]

    def reset_account(self):
        self.tests_taken = [] #array of scored tests for data analysis
        self.data = Data_Holder()
        self.save_user()

    def cram(self):
        #returns a dictionary indexed by type and key as tuple of lowest type and level
        #calculate lowest data has in terms of performance for each section
        array = TYPE_ARRAY
        output = {}
        for section_type in array:
            letter,size = get_section_type_size(section_type)
            current_min = 1
            current_code = None
            percent = None
            for i in range (1, len(section_type_dict(section_type)) + 1):
                code = letter + str(i)
                qs = self.data.data[section_type].stats[code]
                if qs.t != 0:
                    new_point = div(qs.c, qs.t)
                    if new_point < current_min:
                        current_min = new_point
                        current_code = code
                        percent = percentage(new_point)
            output[section_type] = (current_code, percent)
        return output

    def positivecram(self):
        """
        Returns a dictionary indexed by type and key as tuple of high type and level
        """
        types = TYPE_ARRAY
        output = {}
        for section_type in types:
            letter,size = get_section_type_size(section_type)
            current_max = -1
            current_code = None
            percent = None
            for i in range (1, len(section_type_dict(section_type)) + 1):
                code = letter + str(i)
                qs = self.data.data[section_type].stats[code]
                new_point = div(qs.c, qs.t)
                if new_point > current_max or current_max < 0:
                    current_max = new_point
                    current_code = code
                    percent = percentage(new_point)
            output[section_type] = (current_code, percent)
        return output





    def simple_HTML(self):
        FILE = open(user_directory(self.name, self.c) + DIR_SEP + "simple_report" + ".html", "w")
        lines = []

        index = 1
        scores = self.average_scores()
        s1 = []
        pointlabels = []  #form codes for graph points 

        #calculate all scores
        for test in self.tests_taken:
            s1.append([date_converter(test.date),test.score_summary.total_score()])
            pointlabels.append(str(test.test_id))
            index += 1

        #graph js
        g = Graph("Overall Score Performance", 1, s1, None, None, pointlabels)

        #HTML opener
        lines.append('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">' + endl)
        lines.append('<html xmlns="http://www.w3.org/1999/xhtml">' + endl)
        lines.append('<head>')
        lines.append('<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />' + endl)
        lines.append('<link rel="stylesheet" type="text/css" href="../../../HTML/style.css" />' + endl)
        lines.append('<title>Simple Score Report</title>' + endl)
        lines += g.head()
        lines.append('</head>' + endl)
        lines.append('<body>' + endl)
        lines.append('<div id="page">' + endl)
        lines.append('<div id="header">' + endl)
        lines.append('<img src="../../../HTML/EliteLogo.png" width="35%" alt="Excelerate" />' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div id="content">' + endl)
        lines.append('<div id="container">' + endl)
        lines.append('<div id="main">' + endl)
        lines.append('<div id="menu">' + endl)
        lines.append('<h2 style="text-align:center;">Simple Report: ' + self.name + '</h2>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div id="text">' + endl)
        

        #Qualitative Performance
        lines.append('<h1>Qualitative Performance</h1>' + endl)
        lines.append('<p><b>Overall Aptitude:</b><font color = "' + overall_qualitative_color(scores[0]) + '"> ' + overall_qualitative(scores[0]) + '</font></p>' + endl)
        lines.append('<p><b>Writing Performance:</b><font color = "' + qualitative_color(scores[2]) + '"> ' + qualitative(scores[2]) + '</font></p>' + endl)
        lines.append('<p><b>Reading Performance:</b><font color = "' + qualitative_color(scores[1]) + '"> ' + qualitative(scores[1]) + '</font></p>' + endl)
        lines.append('<p><b>Math Performance:</b><font color = "' + qualitative_color(scores[3]) + '"> ' + qualitative(scores[3]) + '</font></p>' + endl)
        #lines.append('<p><b>Essay Performance:</b> Unknown</p>' + endl)
        lines.append('<p><i>Here are the details regarding the scores. Average scores are between 550 to 670. All scores above average are recorded as proficient and all scores below are noted as poor. Unknown scores have no records.</i></p>' + endl)
        lines.append('<hr color="#BBBBBB" size="2" width="100%">' + endl)

        #Average Results
        lines.append('<h1>Average Results</h1>' + endl)
        lines.append('<p><b>Total Score:</b><font color = "' + overall_qualitative_color(scores[0]) + '">  ' + str(scores[0]) + '/2400</font></p>' + endl)
        lines.append('<p><b>Average Writing Score:</b><font color = "' + qualitative_color(scores[2]) + '">  ' + str(scores[2]) + '/800</font></p>' + endl)
        lines.append('<p><b>Average Reading Score:</b><font color = "' + qualitative_color(scores[1]) + '">  ' + str(scores[1]) + '/800</font></p>' + endl)
        lines.append('<p><b>Average Math Score:</b><font color = "' + qualitative_color(scores[3]) + '">  ' + str(scores[3]) + '/800</font></p>' + endl)
        #lines.append('<p><b>Average Essay Score: </b>' + str(scores[4]) + '/12</p>' + endl)
        lines.append('<p><b>Tests Taken:</b> ' + str(len(self.tests_taken)) + '</p>' + endl)
        lines.append('<hr color="#BBBBBB" size="2" width="100%">' + endl)

        #Previous Test History
        """lines.append('<h1>Previous Test History</h1>' + endl)
        for test in self.tests_taken:
            lines.append('<p><b>Test ID:</b> ' + test.test_id + '</p>' + endl)
            lines.append('<p><b>Total:</b> ' + str(test.score_summary.total_score())+'</p>' + endl)
            lines.append('<p><b>Writing:</b> ' + str(test.score_summary.section_scores[WRITING_TYPE]) +'</p>' + endl)
            lines.append('<p><b>Reading:</b> ' + str(test.score_summary.section_scores[READING_TYPE]) +'</p>' + endl)
            lines.append('<p><b>Math:</b> ' + str(test.score_summary.section_scores[MATH_TYPE]) +'</p>' + endl)
            lines.append('<br>' + endl)
        lines.append('<hr color="#BBBBBB" size="2" width="100%">' + endl)"""

        #Overall Graph
        lines.append('<h1>Previous Test History</h1>' + endl)
        lines += g.html(False, False, True)
        lines.append('<br><hr color="#BBBBBB" size="2" width="100%">' + endl)


        #Cram
        cram = self.cram()
        positivecram = self.positivecram()
        lines.append('<h1>Quick Advice</h1>' + endl)

        if (cram[READING_TYPE][0] != None):
            type_name = READING_TYPE_DICT[cram[READING_TYPE][0]]
            best_type = READING_TYPE_DICT[positivecram[READING_TYPE][0]]
            lines.append("<h3><i>Reading Highlights:</i></h3>" + endl)
            lines.append(paropen + "Your strongest reading section is " + best_type + " as you are scoring " + positivecram[READING_TYPE][1] + " in these questions.")
            if best_type != type_name:
                lines.append(paropen + "Your weakest reading section is " + type_name + " as you are scoring " + cram[READING_TYPE][1] + " in these questions.")
         
        if (cram[WRITING_TYPE][0] != None):
            lines.append("<h3><i>Writing Highlights:</i></h3>" + endl)
            type_name = WRITING_TYPE_DICT[cram[WRITING_TYPE][0]]
            best_type = WRITING_TYPE_DICT[positivecram[WRITING_TYPE][0]]
            lines.append(paropen + "Your strongest writing section is " + best_type + " as you are scoring " + positivecram[WRITING_TYPE][1] + " in these questions.")
            if best_type != type_name:
                lines.append(paropen + "Your weakest writing section is " + type_name + " as you are scoring " + cram[WRITING_TYPE][1] + " in these questions.")
        
        if (cram[MATH_TYPE][0] != None):
            lines.append("<h3><i>Math Highlights:</i></h3>" + endl)
            type_name = MATH_TYPE_DICT[cram[MATH_TYPE][0]]
            best_type = MATH_TYPE_DICT[positivecram[MATH_TYPE][0]]
            lines.append(paropen + "Your strongest math section is " + best_type + " as you are scoring " + positivecram[MATH_TYPE][1] + " in these questions.")
            if best_type != type_name:
                lines.append(paropen + "Your weakest math section is " + type_name + " as you are scoring " + cram[MATH_TYPE][1] + " in these questions.")


        #Footer
        lines.append('<br>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div class="clear"></div>' + endl)
        lines.append('<div id="footer">' + endl)
        lines.append('<p><a>' + self.name + ' Simple Report</a></p>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines += g.body()
        lines.append('</body>' + endl)
        lines.append('</html>' + endl)
        lines.append(endl)

        FILE.writelines(lines)
        FILE.close()

    def section_HTML(self, section_type):
        section_type_name = section_name(section_type)
        FILE = open(user_directory(self.name, self.c) + DIR_SEP + section_type_name.lower() + "_report" + ".html", "w")
        lines = []

        index = 1
        graph_index = 1
        scores = self.average_scores()
        s1 = []
        graphs = []
        pointlabels = []
        #calculate all scores
        for test in self.tests_taken:
            s1.append([date_converter(test.date),test.score_summary.section_scores[section_type]])
            pointlabels.append(str(test.test_id))
            index += 1

        g = Graph(section_type_name + " Score Performance", graph_index, s1, None, None, str(pointlabels))
        type_dict = section_type_dict(section_type)
        del pointlabels[:]
        for i in range(1, len(type_dict) + 1):
            key = section_type_name[0] + str(i)
            data = []
            graph_index += 1
            for test in self.tests_taken:
                if test.data.data[section_type].stats[key].t != 0:
                    data.append([date_converter(test.date),div(test.data.data[section_type].stats[key].c, test.data.data[section_type].stats[key].t) * 100])
                    pointlabels.append(str(test.test_id))
            if len(data) > 0:
                graphs.append(Graph(type_dict[key], graph_index, data,None, None, str(pointlabels)))
                del pointlabels[:]




        #HTML opener
        lines.append('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">' + endl)
        lines.append('<html xmlns="http://www.w3.org/1999/xhtml">' + endl)
        lines.append('<head>')
        lines.append('<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />' + endl)
        lines.append('<link rel="stylesheet" type="text/css" href="../../../HTML/style.css" />' + endl)
        lines.append('<title>' + section_type_name + ' Score Report</title>' + endl)
        lines += g.head()
        lines.append('</head>' + endl)
        lines.append('<body>' + endl)
        lines.append('<div id="page">' + endl)
        lines.append('<div id="header">' + endl)
        lines.append('<img src="../../../HTML/EliteLogo.png" width="35%" alt="Excelerate" />' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div id="content">' + endl)
        lines.append('<div id="container">' + endl)
        lines.append('<div id="main">' + endl)
        lines.append('<div id="menu">' + endl)
        lines.append('<h2 style="text-align:center;">' + section_type_name + SPACE + 'Analytics Report: ' + self.name + '</h2>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div id="text">' + endl)
        


        #Average Results
        lines.append('<h1>' + section_type_name + ' Analytics</h1>' + endl)
        lines.append('<hr color="#BBBBBB" size="2" width="100%">' + endl)


        #Overall Graph
        lines += g.html(False, True, False)
        lines.append("<p>This is your performance in the " + section_type_name + " section of the last " + str(len(self.tests_taken)) + " tests you have taken. The more comprehensive analysis of questions correct in each type is found below.</p>")


        #Average Results
        lines.append('<h1>Question Type Analytics</h1>' + endl)
        lines.append('<hr color="#BBBBBB" size="2" width="100%">' + endl)

        #Print the type analysis as well
        i = 1
        for graph in graphs:
            lines += graph.html(True, True, False)
            lines.append('<p><b><font color = "' + self.data.data[section_type].stats[section_type_name[0] + str(i)].color() +'">' + type_dict[section_type_name[0] + str(i)] + "</b> " + str(self.data.data[section_type].stats[section_type_name[0]+str(i)]) + '</p>')
            i+=1 
            lines.append('<hr color="#4169EF" size="1" width="90%">' + endl)
            #lines.append("<br>" + endl)

        #Footer
        lines.append('<br>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div class="clear"></div>' + endl)
        lines.append('<div id="footer">' + endl)
        lines.append('<p><a>' + self.name + SPACE + section_type_name + SPACE +' Report</a></p>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines += g.body()
        lines.append('</body>' + endl)
        lines.append('</html>' + endl)
        lines.append(endl)

        FILE.writelines(lines)
        FILE.close()



    def advanced_HTML(self):

        FILE = open(user_directory(self.name, self.c) + DIR_SEP + "advanced_report" + ".html", "w")

        s1 = []
        writing_scores = []
        reading_scores = []
        math_scores = []
        overall_score_difference = 0
        writing_score_difference = 0
        reading_score_difference = 0
        math_score_difference = 0
        if len(self.tests_taken) > 1:

            for test in self.tests_taken:
                s1.append([date_converter(test.date),test.score_summary.total_score()])
                writing_scores.append([date_converter(test.date), test.score_summary.section_scores[WRITING_TYPE]])
                reading_scores.append([date_converter(test.date), test.score_summary.section_scores[READING_TYPE]])
                math_scores.append([date_converter(test.date), test.score_summary.section_scores[MATH_TYPE]])
        if len(self.tests_taken) > 1:        
            overall_score_difference = (s1[-1][1]) - (s1[0][1])
            writing_score_difference = (writing_scores[-1][1]) - (writing_scores[0][1])
            reading_score_difference = (reading_scores[-1][1]) - (reading_scores[0][1])
            math_score_difference =  (math_scores[-1][1]) - (math_scores[0][1])



        lines = []

        scores = self.average_scores()

        #HTML opener
        lines.append('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">' + endl)
        lines.append('<html xmlns="http://www.w3.org/1999/xhtml">' + endl)
        lines.append('<head>')
        lines.append('<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />' + endl)
        lines.append('<link rel="stylesheet" type="text/css" href="../../../HTML/style.css" />' + endl)
        lines.append('<title>Advanced Score Report</title>' + endl)
        lines.append('</head>' + endl)
        lines.append('<body>' + endl)
        lines.append('<div id="page">' + endl)
        lines.append('<div id="header">' + endl)
        lines.append('<img src="../../../HTML/EliteLogo.png" width="35%" alt="Excelerate" />' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div id="content">' + endl)
        lines.append('<div id="container">' + endl)
        lines.append('<div id="main">' + endl)
        lines.append('<div id="menu">' + endl)
        lines.append('<h2 style="text-align:center;">Advanced Report: ' + self.name + '</h2>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div id="text">' + endl)
            

        #Average Results
        lines.append('<h1>Average Results</h1>' + endl)
        lines.append('<p><b>Total Score:</b><font color = "' + overall_qualitative_color(scores[0]) + '">  ' + str(scores[0]) + '/2400</font></p>' + endl)
        lines.append('<p><b>Average Writing Score:</b><font color = "' + qualitative_color(scores[2]) + '">  ' + str(scores[2]) + '/800</font></p>' + endl)
        lines.append('<p><b>Average Reading Score:</b><font color = "' + qualitative_color(scores[1]) + '">  ' + str(scores[1]) + '/800</font></p>' + endl)
        lines.append('<p><b>Average Math Score:</b><font color = "' + qualitative_color(scores[3]) + '">  ' + str(scores[3]) + '/800</font></p>' + endl)
        #lines.append('<p><b>Average Essay Score: </b>' + str(scores[4]) + '/12</p>' + endl)
        lines.append('<p><b>Tests Taken:</b> ' + str(len(self.tests_taken)) + '</p>' + endl)
        if overall_score_difference > 0:
            lines.append('You have gone from '+ str(s1[0][1]) + ' points on your first practice test to ' + str(s1[-1][1]) + ' points on your most recent test and improved your overall score by ' + str(overall_score_difference) + ' points' + endl)


        lines.append('<hr color="#BBBBBB" size="2" width="100%">' + endl)
       

        #Section Analysis
        lines.append(endl)
        lines.append("<h1>Section Performance Analysis</h1>" + endl)
        lines.append('<p><font color = "#093175">Type: Total Questions | Questions Correct | Questions Missed | Questions Blank</font></p><br>' + endl)
        lines.append(endl)

        #Writing Analytics
        lines.append("<h3><i>Writing Analytics:</i></h3>" + endl + endl)
        if writing_score_difference > 0:
            lines.append('You have gone from '+ str(writing_scores[0][1]) + ' points since your first practice test to ' + str(writing_scores[-1][1]) + ' points on your most recent test and improved your writing score by ' + str(writing_score_difference) + ' points' + endl)

        for i in range(1, WRITING_TYPES + 1):
            if self.data.data[WRITING_TYPE].stats["W"+str(i)].t != 0:
                lines.append('<p><b><font color = "' + self.data.data[WRITING_TYPE].stats["W"+str(i)].color() +'">' + WRITING_TYPE_DICT["W" + str(i)] + '</b> ' + str(self.data.data[WRITING_TYPE].stats["W"+str(i)]) + '</p>')
                lines.append(endl)
        lines.append('<hr color="#4169EF" size="1" width="90%">' + endl)
        lines.append("<br>" + endl)     

        #Reading Analytics
        lines.append("<h3><i>Reading Analytics:</i></h3>" + endl + endl)
        if reading_score_difference > 0:
            lines.append('You have gone from '+ str(reading_scores[0][1]) + ' points on your first practice test to ' + str(reading_scores[-1][1]) + ' points on your most recent test and improved your reading score by ' + str(reading_score_difference) + ' points' + endl)
        for i in range(1, READING_TYPES + 1):
            if self.data.data[READING_TYPE].stats["R"+str(i)].t != 0:
                lines.append('<p><b><font color = "' + self.data.data[READING_TYPE].stats["R"+str(i)].color() +'">' + READING_TYPE_DICT["R" + str(i)] + "</b> " + str(self.data.data[READING_TYPE].stats["R"+str(i)]) + '</p>')
                lines.append(endl)  
        lines.append('<hr color="#4169EF" size="1" width="90%">' + endl)
        lines.append("<br>" + endl)

        #Math Analytics
        lines.append("<h3><i>Math Analytics:</i></h3>" + endl + endl)
        if math_score_difference > 0:
            lines.append('You have gone from '+ str(math_scores[0][1]) + ' points on your first practice test to ' + str(math_scores[-1][1]) + ' points on your most recent test and improved your math score by ' + str(math_score_difference) + ' points' + endl)
        for i in range(1, MATH_TYPES + 1):
            if self.data.data[MATH_TYPE].stats["M"+str(i)].t != 0:
                lines.append('<p><b><font color = "' + self.data.data[MATH_TYPE].stats["M"+str(i)].color() +'">' + MATH_TYPE_DICT["M" + str(i)] + "</b> " + str(self.data.data[MATH_TYPE].stats["M"+str(i)]) + '</p>')
                lines.append(endl)  
        lines.append("<br>" + endl) 
        lines.append('<hr color="#BBBBBB" size="2" width="100%">' + endl)

        #Footer
        lines.append('<br>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div class="clear"></div>' + endl)
        lines.append('<div id="footer">' + endl)
        lines.append('<p><a>' + self.name + ' Advanced Report</a></p>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)


        lines.append('</body>' + endl)
        lines.append('</html>' + endl)
        lines.append(endl)

        FILE.writelines(lines)
        FILE.close()


    def graph_HTML(self):
        graphs = []
        s1 = []
        writing_scores = []
        reading_scores = []
        math_scores = []
        graph_index = 1
        index = 1
        l = {} #overall class average dictionary
        m = {} #math class average dictionary
        r = {} #reading " " "
        w = {} #writing " " "
        overall_rep_flag = True
        pointlabels = []
        #calculate all scores
        for test in self.tests_taken:
            s1.append([date_converter(test.date),test.score_summary.total_score()])
            writing_scores.append([date_converter(test.date), test.score_summary.section_scores[WRITING_TYPE]])
            reading_scores.append([date_converter(test.date), test.score_summary.section_scores[READING_TYPE]])
            math_scores.append([date_converter(test.date), test.score_summary.section_scores[MATH_TYPE]])
            pointlabels.append(str(test.test_id))
            index += 1

        # calculate class averages for each of the 4 graphs Overall, M W R Sections
        filename = class_directory('Elite') + DIR_SEP + "average.txt"
        with open(filename) as f:
            array = f.readlines()
            total = 0
            current_date = None
            for line in array:
                line = line.strip()
                if line == '':
                    continue
                if 'TEST_DATE' in line:
                    current_date = line.split(' ')[1]

                if 'WRITING:' in line:
                    total += int(line.split(' ')[1])
                    w[current_date] = total # get writing class average for 'current_date'

                if 'MATH:' in line:
                    total += int(line.split(' ')[1])
                    m[current_date] = int(line.split(' ')[1])
                        
                if 'READING:' in line:
                    total += int(line.split(' ')[1])
                    r[current_date] = int(line.split(' ')[1])
                        
                if SECTION_SEP in line:
                    l[current_date] = total
                    total = 0
        op= []
        math_class_average = []
        reading_class_average = []
        writing_class_average = []

        #CLASS AVERAGE GRAPH
        """for entry in s1:
            new_entry = [entry[0], l[entry[0]]]
            math_new_entry = [entry[0], m[entry[0]]] # get math class average for test on that date
            reading_new_entry = [entry[0], r[entry[0]]]
            writing_new_entry = [entry[0], w[entry[0]]]
            op.append(new_entry)
            math_class_average.append(math_new_entry)
            reading_class_average.append(reading_new_entry)
            writing_class_average.append(writing_new_entry)"""

        #graph js
        g = Graph("Overall Score Performance", graph_index, s1, op, overall_rep_flag, pointlabels)
        graph_index += 1
        wg = Graph("Writing Score Performance", graph_index, writing_scores, writing_class_average, None, pointlabels)
        graph_index += 1
        rg = Graph("Reading Score Performance", graph_index, reading_scores, reading_class_average, None, pointlabels)
        graph_index += 1
        mg = Graph("Math Score Performance", graph_index, math_scores, math_class_average, None, pointlabels)
        graph_index += 1
        graphs.append(g)
        graphs.append(wg)
        graphs.append(rg)
        graphs.append(mg)


        FILE = open(user_directory(self.name, self.c) + DIR_SEP + "graph_report" + ".html", "w")
        lines = []

        scores = self.average_scores()

        #HTML opener
        lines.append('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">' + endl)
        lines.append('<html xmlns="http://www.w3.org/1999/xhtml">' + endl)
        lines.append('<head>')
        lines.append('<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />' + endl)
        lines.append('<link rel="stylesheet" type="text/css" href="../../../HTML/style.css" />' + endl)
        lines.append('<title>Graph Report</title>' + endl)
        lines += g.head()
        lines.append('</head>' + endl)
        lines.append('<body>' + endl)
        lines.append('<div id="page">' + endl)
        lines.append('<div id="header">' + endl)
        lines.append('<img src="../../../HTML/EliteLogo.png" width="35%" alt="Excelerate" />' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div id="content">' + endl)
        lines.append('<div id="container">' + endl)
        lines.append('<div id="main">' + endl)
        lines.append('<div id="menu">' + endl)
        lines.append('<h2 style="text-align:center;">Graph Report: ' + self.name + '</h2>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div id="text">' + endl)
            

        #Average Results
        lines.append('<h1>Score Graphs</h1>' + endl)
        lines.append('<hr color="#BBBBBB" size="2" width="100%">' + endl)


        index = 0
        #Graph js
        for graph in graphs:
            lines += graph.html(False, True, False)
            index += 1

            if index == 2:
                lines.append('<div style="page-break-after: always;">' '</div>')
            lines.append('<br><hr color="#4169EF" size="1" width="90%">' + endl)
            lines.append(endl)





        #Footer
        lines.append('<br>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div class="clear"></div>' + endl)
        lines.append('<div id="footer">' + endl)
        #lines.append('<p><a>' + self.name + ' Advanced Report</a></p>' + endl)
        lines.append('<p><img src="../../../HTML/Mini Logo.png" width="8%" alt="Excelerate" /></p>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)

        #scripts
        lines += g.body()


        lines.append('</body>' + endl)
        lines.append('</html>' + endl)
        lines.append(endl)

        FILE.writelines(lines)
        FILE.close()

    def c_graph_HTML(self, schoolscoreO, schoolscoreM, schoolscoreR, schoolscoreW, schoolname, schoolcolor, schoolbgcolor):
        graphs = []
        s1 = []
        writing_scores = []
        reading_scores = []
        math_scores = []
        graph_index = 1
        index = 1
        School_Score_O = schoolscoreO
        School_Score_M = schoolscoreM
        School_Score_R = schoolscoreR
        School_Score_W = schoolscoreW
        School_Name = schoolname
        School_Color = schoolcolor
        School_Bgcolor = schoolbgcolor
        #calculate all scores
        for test in self.tests_taken:
            s1.append([index,test.score_summary.total_score()])
            writing_scores.append([index, test.score_summary.section_scores[WRITING_TYPE]])
            reading_scores.append([index, test.score_summary.section_scores[READING_TYPE]])
            math_scores.append([index, test.score_summary.section_scores[MATH_TYPE]])
            index += 1

        #graph js
        g = C_Graph("Overall Score Performance vs " + str(School_Name) + " Admission Average" , graph_index, s1, School_Score_O, School_Name, School_Color, School_Bgcolor)
        graph_index += 1
        wg = C_Graph("Writing Score Performance vs " + str(School_Name) + " Admission Average" , graph_index, writing_scores, School_Score_W, School_Name, School_Color, School_Bgcolor)
        graph_index += 1
        rg = C_Graph("Reading Score Performance vs " + str(School_Name) + " Admission Average" , graph_index, reading_scores, School_Score_R, School_Name, School_Color, School_Bgcolor)
        graph_index += 1
        mg = C_Graph("Math Score Performance vs " + str(School_Name) + " Admission Average" , graph_index, math_scores, School_Score_M, School_Name, School_Color, School_Bgcolor)
        graph_index += 1
        graphs.append(g)
        graphs.append(wg)
        graphs.append(rg)
        graphs.append(mg)


        FILE = open(user_directory(self.name, self.c) + DIR_SEP + "college_graph_report" + ".html", "w")
        lines = []

        scores = self.average_scores()

        #HTML opener
        lines.append('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">' + endl)
        lines.append('<html xmlns="http://www.w3.org/1999/xhtml">' + endl)
        lines.append('<head>')
        lines.append('<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />' + endl)
        lines.append('<link rel="stylesheet" type="text/css" href="../../../HTML/style.css" />' + endl)
        lines.append('<title>College Tracker</title>' + endl)
        lines += g.head()
        lines.append('</head>' + endl)
        lines.append('<body>' + endl)
        lines.append('<div id="page">' + endl)
        lines.append('<div id="header">' + endl)
        lines.append('<img src="../../../HTML/EliteLogo.png" width="35%" alt="Excelerate" />' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div id="content">' + endl)
        lines.append('<div id="container">' + endl)
        lines.append('<div id="main">' + endl)
        lines.append('<div id="menu">' + endl)
        lines.append('<h2 style="text-align:center;"> Graph Report: ' + self.name + '</h2>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div id="text">' + endl)
            

        #Average Results
        lines.append('<h1 style = "text-align:center;" > ' + str(School_Name) + ' Graphs</h1>' + endl)
        lines.append('<hr color="#BBBBBB" size="2" width="100%">' + endl)

        #Graph js
        for graph in graphs:
            lines += graph.html()
            index += 1
            if index == 2:
                lines.append('<div style="page-break-after: always;">' '</div>')

            #lines.append('<h2> ' + 'Students accepted to' + str(School_Name) + 'score an average of' + str(schoolscoreO) + ' </h2>' + endl)
            #lines.append('<br><hr color="#4169EF" size="1" width="90%">' + endl)
            if index < 4:
                lines.append(endl)


        #Footer
        lines.append('<br>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        #lines.append('<p><img src="../../../HTML/Mini Logo.png" width="10%" alt="Excelerate" /></p>' + endl)
        lines.append('<div class="clear"></div>' + endl)
        lines.append('<div id="footer">' + endl)
        #lines.append('<p><a>' + self.name + ' Advanced Report</a></p>' + endl)
        lines.append('<p><img src="../../../HTML/Mini Logo.png" width="8%" alt="Excelerate" /></p>')
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        #scripts
        lines += g.body()


        lines.append('</body>' + endl)
        lines.append('</html>' + endl)
        lines.append(endl)

        FILE.writelines(lines)
        FILE.close()

    def grade_HTML(self, ts, ss):
        graphs = []
        s1 = []
        writing_scores = []
        reading_scores = []
        math_scores = []
        graph_index = 1
        index = 1

        #calculate all scores
        for test in self.tests_taken:
            s1.append([index,test.score_summary.total_score()])
            writing_scores.append([index, test.score_summary.section_scores[WRITING_TYPE]])
            reading_scores.append([index, test.score_summary.section_scores[READING_TYPE]])
            math_scores.append([index, test.score_summary.section_scores[MATH_TYPE]])
            index += 1



        FILE = open(user_directory(self.name, self.c) + DIR_SEP + "grade" + ".html", "w")
        lines = []

        scores = self.average_scores()

        #HTML opener
        lines.append('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">' + endl)
        lines.append('<html xmlns="http://www.w3.org/1999/xhtml">' + endl)
        lines.append('<head>')
        lines.append('<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />' + endl)
        lines.append('<link rel="stylesheet" type="text/css" href="../../../HTML/style.css" />' + endl)
        lines.append('<title>Test Report</title>' + endl)
        lines.append('</head>' + endl)
        lines.append('<body>' + endl)
        lines.append('<div id="page">' + endl)
        lines.append('<div id="header">' + endl)
        lines.append('<img src="../../../HTML/EliteLogo.png" width="35%" alt="Excelerate" />' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div id="content">' + endl)
        lines.append('<div id="container">' + endl)
        lines.append('<div id="main">' + endl)
        lines.append('<div id="menu">' + endl)
        lines.append('<h2 style="text-align:center;">Test Report: ' + self.name + '</h2>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div id="text">' + endl)
            

        #Average Results
        lines.append('<h1>Graded Test Report</h1>' + endl)
        lines.append(str(ss))
        lines.append('<hr color="#BBBBBB" size="2" width="100%">' + endl)
        lines.append('<h1>Section Breakdown</h1>' + endl)
        lines.append(str(ts))




        #Footer
        lines.append('<br>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div class="clear"></div>' + endl)
        lines.append('<div id="footer">' + endl)
        #lines.append('<p><a>' + self.name + ' Test Report</a></p>' + endl)
        lines.append('<p><img src="../../../HTML/Mini Logo.png" width="8%" alt="Excelerate" /></p>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)



        lines.append('</body>' + endl)
        lines.append('</html>' + endl)
        lines.append(endl)

        FILE.writelines(lines)
        FILE.close()

    def simple_report(self):
        FILE = open(user_directory(self.name, self.c) + DIR_SEP + "simple_report" + ".txt", "w")
        lines = []

        #Name
        line = "Name: " + self.name  + endl
        lines.append(line)
        lines.append(endl)
        lines.append(SECTION_SEP)

        #Scores
        scores = self.average_scores()
        lines.append(endl)
        lines.append("Scores:" + endl)
        lines.append("Average Total Score: " + str(scores[0]) + "/2400" + endl)
        lines.append("Average Writing Score: " + str(scores[2]) + "/800" + endl)
        lines.append("Average Reading Score: " + str(scores[1]) + "/800" + endl)
        lines.append("Average Math Score: " + str(scores[3]) + "/800" + endl)
        lines.append("Average Essay Score: " + "??/12" + endl)
        lines.append(endl)
        lines.append("Tests Taken: " + str(len(self.tests_taken)))
        lines.append(endl)
        lines.append(SECTION_SEP)
        lines.append(endl + endl)

        for test in self.tests_taken:
            lines.append(str(test.score_summary))
            lines.append(endl)

        FILE.writelines(lines)
        FILE.close()


    def advanced_report(self):
        FILE = open(user_directory(self.name, self.c)+ DIR_SEP + "advanced_report" + ".txt", "w")
        lines = []

        #Name
        line = "Name: " + self.name  + endl
        lines.append(line)
        lines.append(endl)
        lines.append(SECTION_SEP)

        #Scores
        scores = self.average_scores()
        lines.append(endl)
        lines.append("Scores:" + endl)
        lines.append("Average Total Score: " + str(scores[0]) + "/2400" + endl)
        lines.append("Average Writing Score: " + str(scores[2]) + "/800" + endl)
        lines.append("Average Reading Score: " + str(scores[1]) + "/800" + endl)
        lines.append("Average Math Score: " + str(scores[3]) + "/800" + endl)
        lines.append("Average Essay Score: " + "??/12" + endl)
        lines.append(endl)
        lines.append("Tests Taken: " + str(len(self.tests_taken)))
        lines.append(endl)
        lines.append(SECTION_SEP)

        #Section Analysis
        lines.append(endl)
        lines.append("Section Performance Analysis:" + endl)
        lines.append("Type: Total Questions | Questions Correct | Questions Missed | Questions Blank" + endl)
        lines.append(endl)
        lines.append( "_______" + endl + endl)
        
        lines.append("Writing Analytics:" + endl)
        for i in range(1, WRITING_TYPES + 1):
            lines.append(WRITING_TYPE_DICT["W" + str(i)] + ": " + str(self.data.data[WRITING_TYPE].stats["W"+str(i)]))
            lines.append(endl)
        lines.append( "_______" + endl + endl)      

        lines.append("Math Analytics:" + endl)
        for i in range(1, MATH_TYPES + 1):
            lines.append(MATH_TYPE_DICT["M" + str(i)] + ": " + str(self.data.data[MATH_TYPE].stats["M"+str(i)]))
            lines.append(endl)
        lines.append( "_______" + endl + endl)
        
        lines.append("Reading Analytics:" + endl)
        for i in range(1, READING_TYPES + 1):
            lines.append(READING_TYPE_DICT["R" + str(i)] + ": " + str(self.data.data[READING_TYPE].stats["R"+str(i)]))
            lines.append(endl)

        lines.append(SECTION_SEP)

        #Difficulty Analysis
        lines.append(endl)
        lines.append("Difficulty Analytics:" + endl)
        lines.append(endl)
        lines.append("Writing:" + endl)
        for i in range(1,6):
            lines.append("Level " + str(i) + ": " + str(self.data.data[WRITING_TYPE].stats["L" + str(i)]))
            lines.append(endl)
        lines.append( "_______" + endl + endl)

        lines.append(endl)
        lines.append("Math:" + endl)
        for i in range(1,6):
            lines.append("Level " + str(i) + ": " + str(self.data.data[MATH_TYPE].stats["L" + str(i)]))
            lines.append(endl)
        lines.append( "_______" + endl + endl)

        lines.append(endl)
        lines.append("Reading:" + endl)
        for i in range(1,6):
            lines.append("Level " + str(i) + ": " + str(self.data.data[READING_TYPE].stats["L" + str(i)]))
            lines.append(endl)

        lines.append(endl)

        FILE.writelines(lines)
        FILE.close()




