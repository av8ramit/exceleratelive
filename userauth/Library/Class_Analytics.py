####################################################################################################################################################  
#                                                                                                                                                  #
# This file has been generated by Amit Patankar:                                                                                                   #
#     Created by              : amit.patankar                                                                                                      #    
#     Created on              : 17-04-2014                                                                                                         #
#     Directory               : /Progs/Excelerate/Library                                                                                          #
#     Purpose                 : This structure holds the attributes of each Answer Sheet.                                                          #
#                                                                                                                                                  #
####################################################################################################################################################

from Commands import *
from Values import *

#Base Class Analytics Class
class Analytics(object):

    def __init__(self, c):
        self.c = c
        users = list_users_array(self.c)
        self.user_weakpoints_dict = {}  
        self.type_classes = {} 
        self.uw_frequencym = []
        self.uw_frequencyr = []
        self.uw_frequencyw = []
        self.uw_frequency_dictm = {}  # weak question type: student frequency 
        self.uw_frequency_dictr = {}
        self.uw_frequency_dictw = {}
        self.piechart_datam = []    #   ^^^ data formatted for piechart 
        self.piechart_datar = []
        self.piechart_dataw = []
        self.bargraph_datam = []   #data formatted for bar graph
        self.bargraph_datar = []
        self.bargraph_dataw = []
        self.overall_class_scores = [] # student,score on most recent test for ranking
        self.math_class_scores = []
        self.reading_class_scores = []
        self.writing_class_scores = []
        self.s1 = []     # student, score improvement btwn most recent test vs 1st test
        self.writing_scores = []
        self.reading_scores = []
        self.math_scores = []
        self.overall_score_difference = []
        self.writing_score_difference = []
        self.reading_score_difference = []
        self.math_score_difference = []
        self.overall_score_graph = []
        for username in users:
            filename = user_filename(username, self.c)
            user = load_user(username, filename, c)
            if len(user.tests_taken) != 0:
                for test in user.tests_taken:
                    self.s1.append([date_converter(test.date),test.score_summary.total_score(),test.score_summary.section_scores[WRITING_TYPE],test.score_summary.section_scores[READING_TYPE],test.score_summary.section_scores[MATH_TYPE]])
                  
                if len(user.tests_taken) == 1:
                    self.overall_class_scores.append([user.name,self.s1[0][1:]])
          
                else:
                    self.overall_class_scores.append([user.name,self.s1[-1][1:]])
                


                uw = User_Weakpoints(user.name)
                for section_type in TYPE_ARRAY:
                    section_stats = user.data.data[section_type]
                    lowest_type_percentage = 100
                    lowest_type = None
                    percent_array = []
                    total = 0
                    for key in section_type_dict(section_type):
                        if section_stats.stats[key].t == 0:
                            continue
                        current_percentage = int(div(section_stats.stats[key].c,section_stats.stats[key].t)*100)
                        if current_percentage <= lowest_type_percentage:
                            lowest_type_percentage = current_percentage
                            lowest_type = key
                        total += current_percentage
                        percent_array.append(current_percentage)
                    if(section_type == WRITING_TYPE):
                        self.uw_frequencyw.append(WRITING_TYPE_DICT[lowest_type])

                    if(section_type == READING_TYPE):
                        self.uw_frequencyr.append(READING_TYPE_DICT[lowest_type])
                            
                    if(section_type == MATH_TYPE):
                        self.uw_frequencym.append(MATH_TYPE_DICT[lowest_type])

                    average_percent = int(div(total,len(percent_array)))
                    uw.weakpoints[section_type] = (lowest_type, average_percent)

                self.user_weakpoints_dict[user.name] = uw   
       
        for qtype in self.uw_frequencym:
            freq = self.uw_frequencym.count(qtype)
            self.uw_frequency_dictm[qtype] = freq
            self.piechart_datam.append([str(qtype),freq])
            for i in range(freq):
                self.uw_frequencym.remove(qtype)   

        for qtype in self.uw_frequencyr:
            freq = self.uw_frequencyr.count(qtype)
            self.uw_frequency_dictr[qtype] = freq  
            self.piechart_datar.append([str(qtype),freq])
            for i in range(freq):
                self.uw_frequencyr.remove(qtype) 

        for qtype in self.uw_frequencyw:
            freq = self.uw_frequencyw.count(qtype)
            self.uw_frequency_dictw[qtype] = freq
            self.piechart_dataw.append([str(qtype),freq])
            for i in range(freq):
                self.uw_frequencyw.remove(qtype) 
        #sort class rankings
        self.overall_class_scores.sort(key = lambda score: score[:][1], reverse = False)
        index = 0
        for item in self.overall_class_scores:
            frequency = self.overall_class_scores.count(item)
            self.overall_score_graph.append( [item[1][0], item[0] ] )
            self.math_class_scores.append( [item[1][3], item[0] ] )
            self.reading_class_scores.append( [item[1][2], item[0] ] )
            self.writing_class_scores.append( [item[1][1], item[0] ] )
            for i in range(frequency):
                self.overall_class_scores.remove(item)

        #print(str(self.overall_class_scores))
       # print(str(self.math_class_scores))
       # print(str(self.reading_class_scores))
       # print(str(self.writing_class_scores))
       # print("       MATH           " + str(self.math_class_scores))
        #print("         READING        " + str(self.reading_class_scores))
       # print("            WRITING   "   + str(self.writing_class_scores))
           
            
    
    def report(self):
        FILE = open('Users' + DIR_SEP + self.c + DIR_SEP + "analytics" + ".html", "w")
        lines = []

        #HTML opener
        lines.append('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">' + endl)
        lines.append('<html xmlns="http://www.w3.org/1999/xhtml">' + endl)
        lines.append('<head>')
        lines.append('<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />' + endl)
        lines.append('<link rel="stylesheet" type="text/css" href="../../HTML/style.css" />' + endl)
        lines.append('<link class="include" rel="stylesheet" type="text/css" href="../../Graphs/examples/../jquery.jqplot.min.css" />' + endl)
        lines.append('<link type="text/css" rel="stylesheet" href="../../Graphs/examples/syntaxhighlighter/styles/shCoreDefault.min.css" />' + endl)
        lines.append('<link type="text/css" rel="stylesheet" href="../../Graphs/examples/syntaxhighlighter/styles/shThemejqPlot.min.css" />' + endl)
        lines.append('<script class="include" type="text/javascript" src="../../Graphs/jquery.min.js"></script>' + endl)
        lines.append('<title>Advanced Score Report</title>' + endl)
        lines.append('</head>' + endl)
        lines.append('<body>' + endl)
        lines.append('<div id="page">' + endl)
        lines.append('<div id="header">' + endl)
        lines.append('<img src="../../HTML/EliteLogo.png" width="35%" alt="Excelerate" />' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div id="content">' + endl)
        lines.append('<div id="container">' + endl)
        lines.append('<div id="main">' + endl)
        lines.append('<div id="menu">' + endl)
        lines.append('<h2 style="text-align:center;">Class Analytics Report' + '</h2>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div id="text">' + endl)


        #Class Analysis
        lines.append(endl)
        lines.append("<head>")
        lines.append("<style>")
        lines.append("table,th,td{border:1px solid black;border-collapse:collapse;}th,td{padding:5px;}th{text-align:left;}")
        lines.append("</style>")
        lines.append("</head>")

        
        lines.append('<br><hr color="#4169EF" size="1" width="90%">'+ endl)
        lines.append("<h1>Class Math Question Type Weakness</h1>" + endl)
        '''
        lines.append('<table style="width:500px">')
        lines.append('<tr><th>Weakest Question Type</th><th>Number Of Students</th></tr>')

        for key in self.uw_frequency_dictm:
            lines.append('<tr>')
            lines.append('<td>' + key + '</td>')
            lines.append('<td>' + str(self.uw_frequency_dictm[key]) + '</td>')
            lines.append('</tr>')


        lines.append('</table>')
        lines.append(endl)
        '''

        #lines.append('<br><hr color="#4169EF" size="1" width="90%">'+ endl)
        lines.append('<div id="chart2' + '" style="height:300px; width:500px;"></div>' + endl)
        lines.append('<script class="code" type="text/javascript">' + endl)
        lines.append('$(document).ready(function(){' + endl)
        lines.append('jQuery.jqplot.config.enablePlugins = true;' + endl)
        lines.append("plot2 = jQuery.jqplot('chart2',[" + str(self.piechart_datam) + " ],{" + endl)
        #lines.append('title = ' + "'" + 'Class Math Question Type Weakness' + "'" + ' ,' + endl)
        lines.append('seriesDefaults: {' + endl)
        lines.append('renderer: jQuery.jqplot.PieRenderer,' + endl)
        lines.append('rendererOptions: {' + endl)
        lines.append('fill: true,' + endl)
        lines.append('showDataLabels: true,' + endl)
        lines.append('sliceMargin: 4' + endl)
        lines.append('}' + endl)
        lines.append('},' + endl)
        lines.append('legend: {show:true}'  + endl)
        lines.append('}' + endl)
        lines.append(');' + endl)
        lines.append('});' + endl)
        lines.append('</script>' + endl)



        lines.append("<h1>Class Reading Question Type Weakness</h1>" + endl)
        '''
        lines.append('<table style="width:500px">')
        lines.append('<tr><th>Weakest Question Type</th><th>Number Of Students</th></tr>')


        for key in self.uw_frequency_dictr:
            lines.append('<tr>')
            lines.append('<td>' + key + '</td>')
            lines.append('<td>' + str(self.uw_frequency_dictr[key]) + '</td>')
            lines.append('</tr>')


        lines.append('</table>')
        '''

        lines.append(endl)
        
        #lines.append('<br><hr color="#4169EF" size="1" width="90%">'+ endl)        
        lines.append('<div id="chart3' + '" style="height:300px; width:500px;"></div>' + endl)
        lines.append('<script class="code" type="text/javascript">' + endl)
        lines.append('$(document).ready(function(){' + endl)
        lines.append('jQuery.jqplot.config.enablePlugins = true;' + endl)
        lines.append("plot2 = jQuery.jqplot('chart3',[" + str(self.piechart_datar) + " ],{" + endl)
        #lines.append('title = ' + " '" + 'Class Reading Question Type Weakness' + "'" + ',' + endl)
        lines.append('seriesDefaults: {' + endl)
        lines.append('renderer: jQuery.jqplot.PieRenderer,' + endl)
        lines.append('rendererOptions: {' + endl)
        lines.append('fill: true,' + endl)
        lines.append('showDataLabels: true,' + endl)
        lines.append('sliceMargin: 6' + endl)
        lines.append('}' + endl)
        lines.append('},' + endl)
        lines.append('legend: {show:true}'  + endl)
        lines.append('}' + endl)
        lines.append(');' + endl)
        lines.append('});' + endl)
        lines.append('</script>' + endl)
        
        lines.append("<h1>Class Writing Question Type Weakness</h1>" + endl)
        '''
        lines.append('<table style="width:500px">')
        lines.append('<tr><th>Weakest Question Type</th><th>Number Of Students</th></tr>')

        for key in self.uw_frequency_dictw:
            lines.append('<tr>')
            lines.append('<td>' + key + '</td>')
            lines.append('<td>' + str(self.uw_frequency_dictw[key]) + '</td>')
            lines.append('</tr>')


        lines.append('</table>')
        '''
        lines.append(endl)
        
        #lines.append('<br><hr color="#4169EF" size="1" width="90%">'+ endl) 
        lines.append('<br><div id="chart4' + '" style="height:300px; width:500px;"></div>' + endl)
        lines.append('<script class="code" type="text/javascript">' + endl)
        lines.append('$(document).ready(function(){' + endl)
        lines.append('jQuery.jqplot.config.enablePlugins = true;' + endl)
        lines.append("plot2 = jQuery.jqplot('chart4',[" + str(self.piechart_dataw) + " ],{" + endl)
        #lines.append('title = ' + "'" + 'Class Writing Question Type Weakness' + "'" + ',' + endl)
        lines.append('seriesDefaults: {' + endl)
        lines.append('renderer: jQuery.jqplot.PieRenderer,' + endl)
        lines.append('rendererOptions: {' + endl)
        lines.append('fill: true,' + endl)
        lines.append('showDataLabels: true,' + endl)
        lines.append('sliceMargin: 4' + endl)
        lines.append('}' + endl)
        lines.append('},' + endl)
        lines.append('legend: {show:true}'  + endl)
        lines.append('}' + endl)
        lines.append(');' + endl)
        lines.append('});' + endl)
        lines.append('</script>' + endl)
        


        lines.append(endl)
        lines.append('<br><hr color="#4169EF" size="1" width="90%">'+ endl)
        lines.append("<br><h1>Class Missed Writing Questions frequency</h1>" + endl)

        #lines.append('<br><table style="width:500px">')
        #lines.append('<tr><th>Section_Question</th><th> Number Of Students Incorrect</th></tr>')
        index = 0
        for q in CLASS_MISSED_WRITING:
            self.bargraph_dataw.append([str(q.question), q.frequency])
            #lines.append('<tr>')
            #lines.append('<td>' + str(q.question) + '</td>')
            #lines.append('<td>' + str(q.frequency) + '</td>')
            index += 1
            if index == 10:
                break
        #lines.append('</table>')
        lines.append('<div id="chart5" style="height:350px; width:500px;"></div>' + endl)
        lines.append('<script class="code" type="text/javascript">' + endl)
        lines.append('$(document).ready(function(){' + endl)
        lines.append('$(' + "'" + '#chart5' + "'" + ').jqplot(['+ str(self.bargraph_dataw) + '], { ' + endl)
        lines.append('seriesDefaults:{' + endl)
        lines.append('renderer:$.jqplot.BarRenderer,' + endl)
        lines.append('rendererOptions: {' + endl)
        lines.append('varyBarColor: true' + endl)
        lines.append('}' + endl)
        lines.append('},' + endl)
        lines.append('axes:{' + endl)
        lines.append('xaxis:{' + endl)
        lines.append('label:' + "'" + 'Missed Question' + "'" + ',' + endl)
        lines.append('renderer: $.jqplot.CategoryAxisRenderer,' + endl)
        lines.append('tickRenderer: $.jqplot.CanvasAxisTickRenderer,' + endl)
        lines.append('tickOptions: {' + endl)
        lines.append('angle: -80' + endl)
        lines.append('}' + endl)
        lines.append('},' + endl)
        lines.append('yaxis:{' + endl)
        lines.append('label: ' + "'" + 'Number of Students' + "'" + ',' + endl)
        lines.append('labelRenderer: $.jqplot.CanvasAxisLabelRenderer' + endl)
        lines.append('}' + endl)
        lines.append('}' + endl)
        lines.append('});' + endl)
        lines.append('});' + endl)
        lines.append('</script>')


        lines.append(endl)
        lines.append('<br><hr color="#4169EF" size="1" width="90%">'+ endl)
        lines.append("<h1>Class Missed Reading Questions Frequency</h1>" + endl)
        #lines.append('<br><table style="width:500px">')
        #lines.append('<tr><th>Section_Question</th><th> Number Of Students Incorrect</th></tr>')
        index = 0
        for q in CLASS_MISSED_READING:
            self.bargraph_datar.append([str(q.question), q.frequency])
            #lines.append('<tr>')
            #lines.append('<td>' + str(q.question) + '</td>')
            #lines.append('<td>' + str(q.frequency) + '</td>')
            index += 1
            if index == 10:
                break
        #lines.append('</table>')
        lines.append('<div id="chart6" style="height:350px; width:500px;"></div>' + endl)
        lines.append('<script class="code" type="text/javascript">' + endl)
        lines.append('$(document).ready(function(){' + endl)
        lines.append('$(' + "'" + '#chart6' + "'" + ').jqplot(['+ str(self.bargraph_datar) + '], { ' + endl)
        lines.append('seriesDefaults:{' + endl)
        lines.append('renderer:$.jqplot.BarRenderer,' + endl)
        lines.append('rendererOptions: {' + endl)
        lines.append('varyBarColor: true' + endl)
        lines.append('}' + endl)
        lines.append('},' + endl)
        lines.append('axes:{' + endl)
        lines.append('xaxis:{' + endl)
        lines.append('label:' + "'" + 'Missed Question' + "'" + ',' + endl)
        lines.append('renderer: $.jqplot.CategoryAxisRenderer,' + endl)
        lines.append('tickRenderer: $.jqplot.CanvasAxisTickRenderer,' + endl)
        lines.append('tickOptions: {' + endl)
        lines.append('angle: -80' + endl)
        lines.append('}' + endl)
        lines.append('},' + endl)
        lines.append('yaxis:{' + endl)
        lines.append('label: ' + "'" + 'Number of Students' + "'" + ',' + endl)
        lines.append('labelRenderer: $.jqplot.CanvasAxisLabelRenderer' + endl)
        lines.append('}' + endl)
        lines.append('}' + endl)
        lines.append('});' + endl)
        lines.append('});' + endl)
        lines.append('</script>')

        lines.append(endl)
        lines.append('<br><hr color="#4169EF" size="1" width="90%">'+ endl)
        lines.append("<br><h1>Class Missed Math Questions Frequency</h1>" + endl)
       #lines.append('<br><table style="width:500px">')
        #lines.append('<tr><th>Section_Question</th><th> Number Of Students Incorrect</th></tr>')
        index = 0
        for q in CLASS_MISSED_MATH:
            self.bargraph_datam.append([str(q.question), q.frequency])
            #lines.append('<tr>')
            #lines.append('<td>' + str(q.question) + '</td>')
           # lines.append('<td>' + str(q.frequency) + '</td>')
            index += 1
            if index == 10:
                break
        #lines.append('</table>')
        lines.append('<div id="chart7" style="height:350px; width:500px;"></div>' + endl)
        lines.append('<script class="code" type="text/javascript">' + endl)
        lines.append('$(document).ready(function(){' + endl)
        lines.append('$(' + "'" + '#chart7' + "'" + ').jqplot(['+ str(self.bargraph_datam) + '], { ' + endl)
        lines.append('seriesDefaults:{' + endl)
        lines.append('renderer:$.jqplot.BarRenderer,' + endl)
        lines.append('rendererOptions: {' + endl)
        lines.append('varyBarColor: true' + endl)
        lines.append('}' + endl)
        lines.append('},' + endl)
        lines.append('axes:{' + endl)
        lines.append('xaxis:{' + endl)
        lines.append('label:' + "'" + 'Missed Question' + "'" + ',' + endl)
        lines.append('renderer: $.jqplot.CategoryAxisRenderer,' + endl)
        lines.append('tickRenderer: $.jqplot.CanvasAxisTickRenderer,' + endl)
        lines.append('tickOptions: {' + endl)
        lines.append('angle: -80' + endl)
        lines.append('}' + endl)
        lines.append('},' + endl)
        lines.append('yaxis:{' + endl)
        lines.append('label: ' + "'" + 'Number of Students' + "'" + ',' + endl)
        lines.append('labelRenderer: $.jqplot.CanvasAxisLabelRenderer' + endl)
        lines.append('}' + endl)
        lines.append('}' + endl)
        lines.append('});' + endl)
        lines.append('});' + endl)
        lines.append('</script>')
        
        lines.append(endl)
        '''
        length = len(self.overall_score_graph)
        lines.append('<br><hr color="#4169EF" size="1" width="90%">' + endl)
        lines.append('<br><h1>Ranked Student Preformance On Their Most Recent Test</h1>' + endl)
        lines.append('<div id="chart8" style="height:' + str(length*110) +'px; width:500px;"></div>' + endl)
        lines.append('<script class="code" type="text/javascript">' + endl)
        lines.append('$(document).ready(function(){' + endl)
        lines.append('var label = [' + "'" + 'Writing Score' +  "', '" + 'Reading Score' + "', '" + 'Math Score'  + "', '" + 'Overall Score'+ "'" + '];' + endl)
        lines.append('var plot2 = $.jqplot(' + "'" + 'chart8' + "'" + ', [' + endl)
        lines.append(str(self.writing_class_scores) + ',' +endl)
        lines.append(str(self.reading_class_scores) + ',' +endl)
        lines.append(str(self.math_class_scores) + ',' +endl)
        lines.append(str(self.overall_score_graph) + '], {' +endl)
        lines.append('seriesDefaults: {' + endl)
        lines.append('renderer:$.jqplot.BarRenderer,' + endl)
        lines.append('pointLabels: { show: true, location: ' + "'" + 'e' + "'" + '},' + endl)
        lines.append('shadowAngle: 135, ' + endl)
        lines.append('rendererOptions: { ' + endl)
        lines.append('barDirection: ' + "'" + 'horizontal' + "'" + endl)
        lines.append('}' + endl)
        lines.append('},' + endl)
        lines.append('legend: {show:true, renderer: $.jqplot.EnhancedLegendRenderer, ' + endl)
        lines.append('rendererOptions: { ' + endl)
        lines.append('numberRows: 4 ' + endl)
        lines.append('},' + endl)
        lines.append('placement: ' + "'" + 'insideGrid' + "'" + ',' + endl)
        lines.append('labels: label, '+ endl)
        lines.append('location: ' + "'" + 'ne' + "'" + '},' + endl)
        lines.append('axes: { ' + endl)
        #lines.append('xaxis:{ min:200, max:2400, renderer: $.jqplot.CategoryAxisRenderer,label:' + "'" + 'Test Score' + "'" + '},' + endl)
        lines.append('yaxis: { ' + endl)
        lines.append('renderer: $.jqplot.CategoryAxisRenderer, ' + endl)
        lines.append('label: ' + "'" + 'Ranked Students' + "'" + ',' + endl)
        lines.append('labelRenderer: $.jqplot.CanvasAxisLabelRenderer' + endl)
        lines.append('}' + endl)
        lines.append('}' + endl)
        lines.append('});' + endl)
        lines.append('});' + endl) 
        lines.append('</script>' + endl)
        
        '''
        lines.append(endl)
        lines.append('<br><hr color="#4169EF" size="1" width="90%">'+ endl)
        lines.append("<br><h1>Overall Student Analysis</h1>" + endl)
        lines.append('<table style="width:500px">')
        lines.append('<tr><th>Name</th><th>Weakest Math Section</th><th>Weakest Writing Section</th><th>Weakest Reading Section</th></tr>')

        for user in self.user_weakpoints_dict:
            lines.append('<tr>')
            lines.append('<td>' + user + '</td>')
            lines.append('<td>' + MATH_TYPE_DICT[self.user_weakpoints_dict[user].weakpoints[MATH_TYPE][0]] + '</td>')
            lines.append('<td>' + WRITING_TYPE_DICT[self.user_weakpoints_dict[user].weakpoints[WRITING_TYPE][0]] + '</td>')
            lines.append('<td>' + READING_TYPE_DICT[self.user_weakpoints_dict[user].weakpoints[READING_TYPE][0]] + '</td>')
            lines.append('</tr>')


        lines.append('</table>')


        lines.append(endl)

        #Footer
        lines.append('<br>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('<div class="clear"></div>' + endl)
        lines.append('<div id="footer">' + endl)
        #lines.append('<p><a>' + 'Class Analytics Report</a></p>' + endl)
        lines.append('<p><img src="../../HTML/Mini Logo.png" width="8%" alt="Excelerate" /></p>' + endl)
        lines.append('</div>' + endl)
        lines.append('</div>' + endl)
        lines.append('<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>' + endl)
        lines.append('<script class="include" type="text/javascript" src="../../Graphs/examples/../jquery.jqplot.min.js"></script>' + endl)
        lines.append('<script type="text/javascript" src="../../Graphs/examples/syntaxhighlighter/scripts/shCore.min.js"></script>' + endl)
        lines.append('<script type="text/javascript" src="../../Graphs/examples/syntaxhighlighter/scripts/shBrushJScript.min.js"></script>' + endl)
        lines.append('<script type="text/javascript" src="../../Graphs/examples/syntaxhighlighter/scripts/shBrushXml.min.js"></script>' + endl)
        lines.append('<script class="include" language="javascript" type="text/javascript" src="../../Graphs/examples/../plugins/jqplot.barRenderer.min.js"></script>' + endl)
        lines.append('<script class="include" language="javascript" type="text/javascript" src="../../Graphs/examples/../plugins/jqplot.categoryAxisRenderer.min.js"></script>' + endl)
        lines.append('<script class="include" language="javascript" type="text/javascript" src="../../Graphs/examples/../plugins/jqplot.pointLabels.min.js"></script>' + endl)
        lines.append('<script class="include" language="javascript" type="text/javascript" src="../../Graphs/examples/../plugins/jqplot.dateAxisRenderer.min.js"></script>' + endl)
        lines.append('<script class="include" type="text/javascript" src="../../Graphs/examples/../plugins/jqplot.canvasTextRenderer.min.js"></script>' + endl)
        lines.append('<script class="include" type="text/javascript" src="../../Graphs/examples/../plugins/jqplot.canvasAxisLabelRenderer.min.js"></script>' + endl)
        lines.append('<script type="text/javascript" src="../../Graphs/examples/../plugins/jqplot.canvasAxisTickRenderer.min.js"></script>' + endl)
        lines.append('<script type="text/javascript" src="../plugins/jqplot.logAxisRenderer.min.js"></script>' + endl)
        lines.append('<script type="text/javascript" src="../../Graphs/examples/../plugins/jqplot.highlighter.min.js"></script>' + endl)
        #lines.append('<script type="text/javascript" src="../../Graphs/examples/../plugins/jqplot.cursor.min.js"></script>' + endl)
        lines.append('<script type="text/javascript" src="../../Graphs/examples/../plugins/jqplot.dateAxisRenderer.min.js"></script>' + endl)
        lines.append('<script class="include" type="text/javascript" src="../../Graphs/examples/../plugins/jqplot.pieRenderer.min.js"></script>' + endl)

        lines.append('</body>' + endl)
        lines.append('</html>' + endl)
        lines.append(endl)

        FILE.writelines(lines)
        FILE.close()


class User_Weakpoints(object):

    def __init__(self, name):
        self.name = name
        self.weakpoints = {}  
        #value is tuple (weakest question type, average percent for a type)
        self.weakpoints[WRITING_TYPE] = (0,0)
        self.weakpoints[READING_TYPE] = (0,0)
        self.weakpoints[MATH_TYPE] = (0,0)



